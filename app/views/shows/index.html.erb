 <div class="container">
    <div class="header">
        <ul class="nav nav-pills pull-right">
            <li><a href="/"><i class="glyphicon glyphicon-home"></i></a></li>
        </ul>

        <h1 itemprop="name">SonoLigo アドバイスUI</h1>
    </div>

    <div id="demo">
        <p id="subtitle" class="text-center text-info">&nbsp;</p>

        <div id="wave-timeline"></div>

        <div id="waveform">
            <!-- Here be waveform -->
        </div>

        <!-- Zoom -->
        <p class="row">
            <div class="col-xs-1">
              <i class="glyphicon glyphicon-zoom-in"></i>
            </div>

            <div class="col-xs-10">
              <input id="slider" type="range" min="1" max="50" value="25" style="width: 100%" />
            </div>

            <div class="col-xs-1">
              <i class="glyphicon glyphicon-zoom-out"></i>
            </div>
        </p>

        <p align="center">
          <button class="btn btn-primary" onclick="wavesurfer.playPause()">
            <i class="glyphicon glyphicon-play"></i>
            Play
          </button>
        </p>

        <div class="row" style="margin: 30px 0">
            <div class="col-sm-8">
                <p>
                    Click on a region to enter an annotation.<br />
                    Shift-click plays a region in a loop.
                </p>
            </div>

            <div class="col-sm-2">
                <button class="btn btn-primary btn-block" data-action="play">
                    <span id="play">
                        <i class="glyphicon glyphicon-play"></i>
                        Play
                    </span>

                    <span id="pause" style="display: none">
                        <i class="glyphicon glyphicon-pause"></i>
                        Pause
                    </span>
                </button>
            </div>

            <div class="col-sm-2">
                <button class="btn btn-info btn-block" data-action="export" title="Export annotations to JSON" id = 'export'>
                    <i class="glyphicon glyphicon-file"></i>
                    Export
                </button>
            </div>
        </div>
    </div>

    <!--
     ************************
    ここから編集フォーム -->

    <form role="form" name="edit" style="opacity: 0; transition: opacity 100ms linear; margin: 30px 0;">
        <!-- opacity: 0;で透明化　 -->
        <div class="form-group">
            <label for="start">Start</label>
            <input class="form-control" id="start" name="start" />
        </div>

        <div class="form-group">
            <label for="end">End</label>
            <input class="form-control" id="end" name="end" />
        </div>

        <div class="form-group">
            <label for="note">Note</label>
            <textarea id="note" class="form-control" rows="3" name="note"></textarea>
        </div>

        <button type="submit" class="btn btn-success btn-block">Save</button>
        <center><i>or</i></center>
        <button type="button" class="btn btn-danger btn-block" data-action="delete-region">Delete</button>
    </form>
</div>

<script>
    // trivial.js**********************************
    var wavesurfer = window.wavesurfer;

    var GLOBAL_ACTIONS = {
        play: function() {
            wavesurfer.playPause();
        },

        back: function() {
            wavesurfer.skipBackward();
        },

        forth: function() {
            wavesurfer.skipForward();
        },

        'toggle-mute': function() {
            wavesurfer.toggleMute();
        }
    };

    // Bind actions to buttons and keypresses
    document.addEventListener('DOMContentLoaded', function() {
        document.addEventListener('keydown', function(e) {
            var map = {
                32: 'play', // space
                37: 'back', // left
                39: 'forth' // right
            };
            var action = map[e.keyCode];
            if (action in GLOBAL_ACTIONS) {
                if (document == e.target || document.body == e.target) {
                    e.preventDefault();
                }
                GLOBAL_ACTIONS[action](e);
            }
        });

        [].forEach.call(document.querySelectorAll('[data-action]'), function(el) {
            el.addEventListener('click', function(e) {
                var action = e.currentTarget.dataset.action;
                if (action in GLOBAL_ACTIONS) {
                    e.preventDefault();
                    GLOBAL_ACTIONS[action](e);
                }
            });
        });
    });

    // Misc
    // document.addEventListener('DOMContentLoaded', function() {
    //     // Web Audio not supported
    //     if (!window.AudioContext && !window.webkitAudioContext) {
    //         var demo = document.querySelector('#demo');
    //         if (demo) {
    //             demo.innerHTML = '<img src="/example/screenshot.png" />';
    //         }
    //     }

    //     // Navbar links
    //     var ul = document.querySelector('.nav-pills');
    //     var pills = ul.querySelectorAll('li');
    //     var active = pills[0];
    //     if (location.search) {
    //         var first = location.search.split('&')[0];
    //         var link = ul.querySelector('a[href="' + first + '"]');
    //         if (link) {
    //             active = link.parentNode;
    //         }
    //     }
    //     active && active.classList.add('active');
    // });

// **********************************

    /**
     * Create a WaveSurfer instance.
     */
    var wavesurfer;
    var global = [];

    /**
     * Init & load.

     DOMContentLoaded = $(document).ready

     */      
     console.log('initialize');  

    var wavesurfer = WaveSurfer.create({
        container: '#waveform',
        waveColor: 'violet',
        heigth: 200,
        pixelRation: 1,
        scrollParent: true,
        normalize: true,
        minimap: true
        // backend: 'MediaElemnt'
        // pluginsを加えると
        // plugins: [
            // WaveSurfer.regions.create()
        //     WaveSurfer.minimap.create({
        //         height: 30,
        //         waveColor: '#ddd',
        //         progressColor: '#999',
        //         cursorColor: '#999', 
        //     }),
        //     WaveSurfer.timeline.create({
        //         container: '#wave-timeline'
        //     })
        // ]
    }); 

    //音源のロード　public下なら / から始めるよう。
    wavesurfer.load('/msw001_03_rashomon_akutagawa_mt_64kb.mp3');

    //timelineの表示
    wavesurfer.on('ready', function () {
      var timeline = Object.create(WaveSurfer.Timeline);

      timeline.init({
        wavesurfer: wavesurfer,
        container: '#wave-timeline'
      });
    });

    // zoom barの表示
    var slider = document.querySelector('#slider');

        slider.oninput = function () {
          var zoomLevel = Number(slider.value);
          wavesurfer.zoom(zoomLevel);
    };

        /* Regions追加している。 */

    wavesurfer.on('ready', function() {
        wavesurfer.enableDragSelection({
            color: randomColor(0.1)

        });

        console.log('add region');

        // if (localStorage.regions) {
        //     loadRegions(JSON.parse(localStorage.regions));
        //     console.log('load localStorage...');
        // } else {
            // loadRegions(
            //     extractRegions(
            //         wavesurfer.backend.getPeaks(512),
            //         wavesurfer.getDuration()
            //     )
            // );
            wavesurfer.util
                .ajax({
                    responseType: 'json',
                    url: '/annotations.json'
                })
                .on('success', function(data) {
                    loadRegions(data);
                    saveRegions();
                    //console.log(data);
                    global = data;
                    //console.log(global);
                });
        // }
    });



    // regionをclickしたら、annotationを編集する画面が出るようにする。
    wavesurfer.on('region-click', editAnnotation);
    /**
     * Edit annotation for a region.
     */
    function editAnnotation(region) {

        console.log('edit annotation');
        console.log(region);
        //console.log(document.forms.edit.elements);

        console.log(global);

        var form = document.forms.edit;
        form.style.opacity = 1;//透明にしない？

        //0.1秒単位で丸め込んでる？
        // ここはhtmlの各要素の表示されるためか。
        (form.elements.start.value = Math.round(region.start * 100) / 100 ),
        (form.elements.end.value = Math.round(region.end * 100) / 100);
        //form.elements.label.value = region.label || '';    
        form.elements.note.value = region.data.note || '';

        form.onsubmit = function(e) {
            e.preventDefault();
            //regionのもつデータがstart end dataらしいんだけど、これってどこに入ってる・
            //label: form.elements.label.value,を追加
            region.update({
                start: form.elements.start.value,
                end: form.elements.end.value,
                //label: form.elements.label.value,
                data: {
                    note: form.elements.note.value
                }
            });
            form.style.opacity = 0;
        };
        form.onreset = function() {
            form.style.opacity = 0;
            form.dataset.region = null;
        };
        form.dataset.region = region.id;
    }

    //regionをupdate or removeしたらsaveregions関数が発動。region-updated新しいのが追加されたときかな
    wavesurfer.on('region-updated', saveRegions);
    wavesurfer.on('region-removed', saveRegions);

     //ここに label: region.labelを追加
    function saveRegions() {
        console.log('save regions');
        console.log(localStorage.regions);

        localStorage.regions = JSON.stringify(
            Object.keys(wavesurfer.regions.list).map(function(id) {
                var region = wavesurfer.regions.list[id];
                return {
                    start: region.start,
                    end: region.end,
                    // label: region.label,
                    attributes: region.attributes,
                    data: region.data
                };
            })
        );
    }




    /**
     * Random RGBA color. alphaは透明度かな
     */
    function randomColor(alpha) {
        return (
            'rgba(' +
            [
                ~~(Math.random() * 255),
                ~~(Math.random() * 255),
                ~~(Math.random() * 255),
                alpha || 1
            ] +
            ')'
        );
    }

    /**
     * Display annotation.
     */
    function showNote(region) {
        if (!showNote.el) {
            showNote.el = document.querySelector('#subtitle');
        }
        showNote.el.textContent = region.data.note || '–';
    }

    function loadRegions(regions) {
        regions.forEach(function(region) {
            region.color = randomColor(0.1);
            wavesurfer.addRegion(region);
        });
    }

    // $('#export').on('click', function() {
    //     var fs = require('fs');
    //     fs.writeFile('hoge.json', JSON.stringify(localStorage.regions, null, '    '));

    // });

    jQuery("#export").click (function ()
        {
        const blob = new Blob([ localStorage.regions ], { "type" : "json" })
        jQuery("<a></a>", {href: window.URL.createObjectURL(blob),
            download: "aaa01.json",
            target: "_blank"})[0].click()
        });




        
      
</script>
